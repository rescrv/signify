diff --git b/bcrypt_pbkdf.c a/bcrypt_pbkdf.c
index cde347c..405ea48 100644
--- b/bcrypt_pbkdf.c
+++ a/bcrypt_pbkdf.c
@@ -15,6 +15,8 @@
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
+#include "config.h"
+
 #include <sys/types.h>
 
 #include <stdint.h>
@@ -22,7 +24,16 @@
 #include <blf.h>
 #include <sha2.h>
 #include <string.h>
-#include <util.h>
+#if HAVE_BSD_STRING_H
+#include <bsd/string.h>
+#endif
+#if HAVE_LIBUTIL_H
+#include <libutil.h>
+#elif HAVE_BSD_LIBUTIL_H
+#include <bsd/libutil.h>
+#else
+#error portability error
+#endif
 
 #define	MINIMUM(a,b) (((a) < (b)) ? (a) : (b))
 
diff --git b/sha2.c a/sha2.c
index ec13e44..55e9f67 100644
--- b/sha2.c
+++ a/sha2.c
@@ -311,9 +311,7 @@ SHA224Init(SHA2_CTX *context)
 }
 DEF_WEAK(SHA224Init);
 
-MAKE_CLONE(SHA224Transform, SHA256Transform);
-MAKE_CLONE(SHA224Update, SHA256Update);
-MAKE_CLONE(SHA224Pad, SHA256Pad);
+void SHA224Pad(SHA2_CTX *context) __attribute__ ((weak, alias ("SHA256Pad")));
 DEF_WEAK(SHA224Transform);
 DEF_WEAK(SHA224Update);
 DEF_WEAK(SHA224Pad);
@@ -910,9 +908,7 @@ SHA384Init(SHA2_CTX *context)
 }
 DEF_WEAK(SHA384Init);
 
-MAKE_CLONE(SHA384Transform, SHA512Transform);
-MAKE_CLONE(SHA384Update, SHA512Update);
-MAKE_CLONE(SHA384Pad, SHA512Pad);
+void SHA384Pad(SHA2_CTX *context) __attribute__ ((weak, alias ("SHA512Pad")));
 DEF_WEAK(SHA384Transform);
 DEF_WEAK(SHA384Update);
 DEF_WEAK(SHA384Pad);
@@ -947,9 +943,8 @@ SHA512_256Init(SHA2_CTX *context)
 }
 DEF_WEAK(SHA512_256Init);
 
-MAKE_CLONE(SHA512_256Transform, SHA512Transform);
-MAKE_CLONE(SHA512_256Update, SHA512Update);
-MAKE_CLONE(SHA512_256Pad, SHA512Pad);
+void SHA512_256Update(SHA2_CTX *context, const u_int8_t *data, size_t len) __attribute__ ((weak, alias ("SHA512Update")));
+void SHA512_256Pad(SHA2_CTX *context) __attribute__ ((weak, alias ("SHA512Pad")));
 DEF_WEAK(SHA512_256Transform);
 DEF_WEAK(SHA512_256Update);
 DEF_WEAK(SHA512_256Pad);
diff --git b/signify.c a/signify.c
index 5158326..b15d2b8 100644
--- b/signify.c
+++ a/signify.c
@@ -14,6 +14,9 @@
  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
+
+#include "config.h"
+
 #include <sys/stat.h>
 
 #include <netinet/in.h>
@@ -23,14 +26,29 @@
 #include <stdint.h>
 #include <fcntl.h>
 #include <string.h>
+#if HAVE_BSD_STRING_H
+#include <bsd/string.h>
+#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <stddef.h>
 #include <ohash.h>
 #include <err.h>
 #include <unistd.h>
+#if HAVE_READPASSPHRASE_H
 #include <readpassphrase.h>
-#include <util.h>
+#elif HAVE_BSD_READPASSPHRASE_H
+#include <bsd/readpassphrase.h>
+#else
+#error portability problem
+#endif
+#if HAVE_LIBUTIL_H
+#include <libutil.h>
+#elif HAVE_BSD_LIBUTIL_H
+#include <bsd/libutil.h>
+#else
+#error portability problem
+#endif
 #include <sha2.h>
 
 #include "crypto_api.h"
@@ -71,7 +89,7 @@ struct sig {
 	uint8_t sig[SIGBYTES];
 };
 
-static void __dead
+static void
 usage(const char *error)
 {
 	if (error)
@@ -87,7 +105,7 @@ usage(const char *error)
 	exit(1);
 }
 
-int
+extern int
 xopen(const char *fname, int oflags, mode_t mode)
 {
 	struct stat sb;
@@ -111,7 +129,7 @@ xopen(const char *fname, int oflags, mode_t mode)
 	return fd;
 }
 
-void *
+extern void *
 xmalloc(size_t len)
 {
 	void *p;
@@ -206,7 +224,7 @@ readmsg(const char *filename, unsigned long long *msglenp)
 	return msg;
 }
 
-void
+extern void
 writeall(int fd, const void *buf, size_t buflen, const char *filename)
 {
 	ssize_t x;
@@ -764,9 +782,6 @@ main(int argc, char **argv)
 		VERIFY
 	} verb = NONE;
 
-	if (pledge("stdio rpath wpath cpath tty", NULL) == -1)
-		err(1, "pledge");
-
 	rounds = 42;
 
 	while ((ch = getopt(argc, argv, "CGSVzc:em:np:qs:t:x:")) != -1) {
@@ -839,8 +854,6 @@ main(int argc, char **argv)
 
 #ifndef VERIFYONLY
 	if (verb == CHECK) {
-		if (pledge("stdio rpath", NULL) == -1)
-			err(1, "pledge");
 		if (!sigfile)
 			usage("must specify sigfile");
 		check(pubkeyfile, sigfile, quiet, argc, argv);
@@ -865,14 +878,12 @@ main(int argc, char **argv)
 	switch (verb) {
 #ifndef VERIFYONLY
 	case GENERATE:
-		/* no pledge */
 		if (!pubkeyfile || !seckeyfile)
 			usage("must specify pubkey and seckey");
 		check_keyname_compliance(pubkeyfile, seckeyfile);
 		generate(pubkeyfile, seckeyfile, rounds, comment);
 		break;
 	case SIGN:
-		/* no pledge */
 		if (gzip) {
 			if (!msgfile || !seckeyfile || !sigfile)
 				usage("must specify message sigfile seckey");
@@ -885,15 +896,6 @@ main(int argc, char **argv)
 		break;
 #endif
 	case VERIFY:
-		if ((embedded || gzip) &&
-		    (msgfile && strcmp(msgfile, "-") != 0)) {
-			/* will need to create output file */
-			if (pledge("stdio rpath wpath cpath", NULL) == -1)
-				err(1, "pledge");
-		} else {
-			if (pledge("stdio rpath", NULL) == -1)
-				err(1, "pledge");
-		}
 		if (gzip) {
 			zverify(pubkeyfile, msgfile, sigfile, keytype);
 		} else {
@@ -904,8 +906,6 @@ main(int argc, char **argv)
 		}
 		break;
 	default:
-		if (pledge("stdio", NULL) == -1)
-			err(1, "pledge");
 		usage(NULL);
 		break;
 	}
